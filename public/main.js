// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let posts = [];
let users = [];
let comments = [];
let currentAuthorFilter = null;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const authorList = document.getElementById('author-list');
const postsContainer = document.getElementById('posts-container');
const modal = document.getElementById('modal');
const closeModal = document.querySelector('.close');
const modalTitle = document.getElementById('modal-title');
const modalBody = document.getElementById('modal-body');
const commentsList = document.getElementById('comments-list');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
async function fetchData() {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (–±—ã—Å—Ç—Ä–µ–µ –∏ –Ω–∞–¥—ë–∂–Ω–µ–µ)
    const [postsRes, usersRes, commentsRes] = await Promise.all([
      fetch('http://localhost:3000/posts'),
      fetch('http://localhost:3000/users'),
      fetch('http://localhost:3000/comments')
    ]);

    if (!postsRes.ok || !usersRes.ok || !commentsRes.ok) {
      throw new Error('–û–¥–∏–Ω –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
    }

    posts = await postsRes.json();
    users = await usersRes.json();
    comments = await commentsRes.json();

    // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤
    populateAuthors();

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    renderPosts();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ json-server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000.');
  }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ—Ä–æ–≤
function populateAuthors() {
  // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
  authorList.innerHTML = '';

  // –î–æ–±–∞–≤–ª—è–µ–º "–í—Å–µ"
  const allItem = document.createElement('li');
  allItem.textContent = '–í—Å–µ';
  allItem.addEventListener('click', () => filterByAuthor(null));
  authorList.appendChild(allItem);

  // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏–∏!)
  const uniqueLastNames = new Set();
  posts.forEach(post => {
    const user = users.find(u => u.id === post.userId);
    if (user && user.name) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–º–∏–ª–∏—é (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –≤ –∏–º–µ–Ω–∏)
      const lastName = user.name.trim().split(' ').pop();
      uniqueLastNames.add(lastName);
    }
  });

  uniqueLastNames.forEach(lastName => {
    const li = document.createElement('li');
    li.textContent = lastName;
    li.addEventListener('click', () => filterByAuthor(lastName));
    authorList.appendChild(li);
  });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –∞–≤—Ç–æ—Ä–∞
function filterByAuthor(lastName) {
  currentAuthorFilter = lastName;
  renderPosts();

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ
  Array.from(authorList.children).forEach(li => {
    const isActive = (lastName === null && li.textContent === '–í—Å–µ') ||
                     (lastName && li.textContent === lastName);
    li.classList.toggle('active', isActive);
  });
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
function renderPosts() {
  postsContainer.innerHTML = '';

  const filteredPosts = currentAuthorFilter
    ? posts.filter(post => {
        const user = users.find(u => u.id === post.userId);
        return user && user.name.trim().split(' ').pop() === currentAuthorFilter;
      })
    : posts;

  filteredPosts.forEach(post => {
    const postEl = document.createElement('div');
    postEl.className = 'post';

    const user = users.find(u => u.id === post.userId);
    const lastName = user ? user.name.trim().split(' ').pop() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

    postEl.innerHTML = `
      <p><strong>–ê–≤—Ç–æ—Ä:</strong> ${lastName}</p>
      <p>${post.body.substring(0, 100)}${post.body.length > 100 ? '...' : ''}</p>
      <button class="read-more" data-id="${post.id}">Read More</button>
    `;

    postsContainer.appendChild(postEl);
  });

  // üî• –í–ê–ñ–ù–û: –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
  document.querySelectorAll('.read-more').forEach(button => {
    button.addEventListener('click', (e) => {
      const postId = parseInt(e.target.dataset.id, 10);
      showPostModal(postId); // async –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –¥–∞–Ω–Ω—ã–µ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    });
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ—Å—Ç–æ–º –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
function showPostModal(postId) {
  const post = posts.find(p => p.id === postId);
  if (!post) return;

  const user = users.find(u => u.id === post.userId);
  const postComments = comments.filter(c => c.postId === postId);

  modalTitle.textContent = post.title;
  modalBody.textContent = post.body;

  commentsList.innerHTML = '';
  postComments.forEach(comment => {
    const commentEl = document.createElement('li');
    commentEl.className = 'comment';
    commentEl.innerHTML = `
      <p><strong>${comment.name}</strong> (${comment.email})</p>
      <p>${comment.body}</p>
    `;
    commentsList.appendChild(commentEl);
  });

  modal.style.display = 'block';
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
if (closeModal) {
  closeModal.addEventListener('click', () => {
    modal.style.display = 'none';
  });
}

window.addEventListener('click', (e) => {
  if (e.target === modal) {
    modal.style.display = 'none';
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  if (!authorList || !postsContainer || !modal) {
    console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ HTML!');
    return;
  }
  fetchData();
});